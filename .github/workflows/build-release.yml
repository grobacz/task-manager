name: Build and Release

on:
  push:
    branches:
      - master      # Build on master branch updates
    tags:
      - 'v*'        # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build Ubuntu ${{ matrix.ubuntu-version }} (${{ startsWith(github.ref, 'refs/tags/') && 'Release' || 'Development' }})
    runs-on: self-hosted
    strategy:
      matrix:
        # Build on different Ubuntu versions for compatibility
        ubuntu-version: ['22.04', '24.04']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3 \
          python3-pip \
          python3-gi \
          python3-gi-cairo \
          python3-dev \
          gir1.2-gtk-4.0 \
          wmctrl \
          upx-ucl
          
    - name: Verify Python environment
      run: |
        echo "Python version: $(python3 --version)"
        echo "Python path: $(which python3)"
          
    - name: Build executable  
      run: |
        echo "🔧 Setting up CI build environment..."
        
        # Set Python path to include system packages
        export PYTHONPATH="/usr/lib/python3/dist-packages:/usr/lib/python3.12/dist-packages:$PYTHONPATH"
        
        # Add user local bin to PATH for PyInstaller
        export PATH="$HOME/.local/bin:$PATH"
        
        # Verify environment
        echo "Python version: $(python3 --version)"
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Test GTK4 availability
        echo "Testing GTK4 imports..."
        python3 -c "
        import gi
        print('✅ gi imported from:', gi.__file__)
        gi.require_version('Gtk', '4.0')  
        from gi.repository import Gtk
        print('✅ GTK4 imported successfully')
        " || {
          echo "❌ GTK4 import failed - build cannot continue"
          exit 1
        }
        
        # Run the build
        echo "🚀 Starting build process..."
        if python3 build.py; then
          echo "✅ CI build completed successfully!"
        else
          echo "❌ Build failed"
          exit 1
        fi
        
        # Verify the executable was created
        if [ ! -f "dist/task-tracker" ]; then
          echo "❌ Executable not found at dist/task-tracker"
          exit 1
        fi
        
    - name: Test executable (pre-compression)
      run: |
        echo "Testing executable before compression..."
        ls -lh dist/task-tracker
        file dist/task-tracker
        ./dist/task-tracker --help || {
          echo "❌ Executable failed before compression - aborting UPX"
          exit 1
        }
        
    - name: Compress executable with UPX
      run: |
        echo "Compressing executable with UPX..."
        # Create backup before compression
        cp dist/task-tracker dist/task-tracker.backup
        
        # Try UPX compression with less aggressive settings (PyInstaller compatibility)
        if upx --lzma dist/task-tracker; then
          echo "✅ UPX compression successful"
        else
          echo "⚠️ UPX compression failed, trying basic compression..."
          cp dist/task-tracker.backup dist/task-tracker
          if upx -9 dist/task-tracker; then
            echo "✅ Basic UPX compression successful"
          else
            echo "⚠️ All UPX compression failed, using uncompressed version"
            cp dist/task-tracker.backup dist/task-tracker
          fi
        fi
        
    - name: Test executable (post-compression)
      run: |
        echo "Testing final executable..."
        ./dist/task-tracker --help || {
          echo "❌ Executable corrupted by UPX - restoring backup"
          cp dist/task-tracker.backup dist/task-tracker
          ./dist/task-tracker --help
        }
        
    - name: Get file info
      run: |
        ls -lh dist/task-tracker
        file dist/task-tracker
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: task-tracker-ubuntu-${{ matrix.ubuntu-version }}${{ startsWith(github.ref, 'refs/tags/') && '' || '-dev' }}
        path: dist/task-tracker
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

  release:
    name: Create Release
    needs: build
    runs-on: self-hosted
    # Only create releases for tags or manual dispatch, not regular branch pushes
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release files
      run: |
        mkdir -p release-files
        
        # Rename executables with version info
        for dir in artifacts/*/; do
          if [ -f "$dir/task-tracker" ]; then
            version_name=$(basename "$dir" | sed 's/task-tracker-//')
            cp "$dir/task-tracker" "release-files/task-tracker-${version_name}"
            chmod +x "release-files/task-tracker-${version_name}"
          fi
        done
        
        # Create a universal executable (use Ubuntu 22.04 as default)
        if [ -f "release-files/task-tracker-ubuntu-22.04" ]; then
          cp "release-files/task-tracker-ubuntu-22.04" "release-files/task-tracker"
          chmod +x "release-files/task-tracker"
        fi
        
        ls -la release-files/
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Task Tracker ${{ steps.version.outputs.version }}
        body: |
          ## Task Tracker ${{ steps.version.outputs.version }}
          
          A lightweight Linux desktop application for managing markdown task lists with interactive checkboxes.
          
          ### Download Options:
          
          - **task-tracker** - Universal executable (recommended, ~50-70MB after compression)
          - **task-tracker-ubuntu-XX.XX** - Version-specific executables
          
          ### System Requirements:
          - Linux x86_64 with GTK4 libraries (usually pre-installed)
          - Optional: wmctrl for always-on-top functionality (`sudo apt install wmctrl`)
          
          ### Usage:
          1. Download the `task-tracker` executable
          2. Make it executable: `chmod +x task-tracker`
          3. Run: `./task-tracker`
          
          ### Features:
          - Interactive markdown task list management
          - Auto-save changes to source files
          - Smart window resizing
          - Always-on-top mode
          - Modern GTK4 interface
          - File persistence and settings
          
          Built from commit ${{ github.sha }}
        draft: false
        prerelease: false
        files: |
          release-files/task-tracker
          release-files/task-tracker-ubuntu-22.04
          release-files/task-tracker-ubuntu-24.04
